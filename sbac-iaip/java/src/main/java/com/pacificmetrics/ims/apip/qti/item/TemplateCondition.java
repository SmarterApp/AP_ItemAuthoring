//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.08.09 at 09:22:32 PM IST 
//


package com.pacificmetrics.ims.apip.qti.item;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * 
 *                 The TemplateCondition complexType is the container for the definition of the 'If..Then..Else/ElseIf' rule construction. If the expression given in the templateIf or templateElseIf evaluates to true then the sub-rules contained within it are followed and any following templateElseIf or templateElse parts are ignored for this template condition. If the expression given in the templateIf or templateElseIf does not evaluate to true then consideration passes to the next templateElseIf or, if there are no more templateElseIf parts then the sub-rules of the templateElse are followed (if specified).
 *             
 * 
 * <p>Java class for TemplateCondition.Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TemplateCondition.Type">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.imsglobal.org/xsd/apip/apipv1p0/qtiitem/imsqti_v2p2}templateIf"/>
 *         &lt;element ref="{http://www.imsglobal.org/xsd/apip/apipv1p0/qtiitem/imsqti_v2p2}templateElseIf" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.imsglobal.org/xsd/apip/apipv1p0/qtiitem/imsqti_v2p2}templateElse" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TemplateCondition.Type", propOrder = {
    "templateIf",
    "templateElseIves",
    "templateElse"
})
@XmlRootElement(name = "templateCondition")
public class TemplateCondition {

    @XmlElement(required = true)
    protected TemplateIfType templateIf;
    @XmlElement(name = "templateElseIf")
    protected List<TemplateIfType> templateElseIves;
    protected TemplateElse templateElse;

    /**
     * Gets the value of the templateIf property.
     * 
     * @return
     *     possible object is
     *     {@link TemplateIfType }
     *     
     */
    public TemplateIfType getTemplateIf() {
        return templateIf;
    }

    /**
     * Sets the value of the templateIf property.
     * 
     * @param value
     *     allowed object is
     *     {@link TemplateIfType }
     *     
     */
    public void setTemplateIf(TemplateIfType value) {
        this.templateIf = value;
    }

    /**
     * Gets the value of the templateElseIves property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the templateElseIves property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTemplateElseIves().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TemplateIfType }
     * 
     * 
     */
    public List<TemplateIfType> getTemplateElseIves() {
        if (templateElseIves == null) {
            templateElseIves = new ArrayList<TemplateIfType>();
        }
        return this.templateElseIves;
    }

    /**
     * Gets the value of the templateElse property.
     * 
     * @return
     *     possible object is
     *     {@link TemplateElse }
     *     
     */
    public TemplateElse getTemplateElse() {
        return templateElse;
    }

    /**
     * Sets the value of the templateElse property.
     * 
     * @param value
     *     allowed object is
     *     {@link TemplateElse }
     *     
     */
    public void setTemplateElse(TemplateElse value) {
        this.templateElse = value;
    }

}
