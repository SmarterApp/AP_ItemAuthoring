<xs:schema xmlns="http://www.imsglobal.org/xsd/apip/apipv1p0/qtiitem/imsqti_v2p1" targetNamespace="http://www.imsglobal.org/xsd/apip/apipv1p0/qtiitem/imsqti_v2p1"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:sch="http://purl.oclc.org/dsdl/schematron" version="IMS APIP 1.0 QTI 2.1 ITEM" elementFormDefault="qualified"
    attributeFormDefault="unqualified">


    <xs:annotation>
        <xs:documentation>
            Definition of Schematron Validation Rules
            -----------------------------------------
            Author: Colin Smythe (IMS Global)
            Date: 31st October, 2012
            Version: 1.0
            Status: Final Release

            Description: This is the set of Schematron Rules to further enforce the QTIv2.1 Information Model. The rule sets that have been defined are:
            [RULE SET GENERAL 1] Ensure that certain expressions are NOT used for Response Processing.
            [RULE SET GENERAL 2] Ensure that the Item, Section, Test and TestPart identifiers are unique.
            [RULE SET GENERAL 3] Ensure that AssessmentItem Response Declarations are correct.
            [RULE SET INTERACTION 1] Enforce the correct use the TextEntryInteraction attributes.

            RULE SET GENERAL 1: Ensure that certain expressions are NOT used for Response Processing. The set
            of rules are:
            *RULE GENERAL 1a-Assertion 3 :- The expression numberPresented must NOT be used in Response Processing.
            *RULE GENERAL 1a-Assertion 4 :- The expression numberResponded must NOT be used in Response Processing.
            *RULE GENERAL 1a-Assertion 5 :- The expression numberSelected must NOT be used in Response Processing.
            *RULE GENERAL 1a-Assertion 1 :- The expression numberCorrect must NOT be used in Response Processing.
            *RULE GENERAL 1a-Assertion 2 :- The expression numberIncorrect must NOT be used in Response Processing.
            *RULE GENERAL 1a-Assertion 6 :- The expression outcomeMinimum must NOT be used in Response Processing.
            *RULE GENERAL 1a-Assertion 7 :- The expression outcomeMaximum must NOT be used in Response Processing.
            *RULE GENERAL 1a-Assertion 8 :- The expression testVariables must NOT be used in Response Processing.

            RULE SET GENERAL 2: Ensure that the Item, Section, Test and TestPart identifiers
            are unique. The set of rules are:
            *RULE GENERAL 2a-Assertion 1 :- The AssessmentTest and a TestPart must not have the same unique identifier.
            *RULE GENERAL 2a-Assertion 2 :- The AssessmentTest and an AssessmentSection must not have the same unique identifier.
            *RULE GENERAL 2a-Assertion 3 :- The AssessmentTest and a direct child AssessmentSectionRef must not have the same unique identifier.
            *RULE GENERAL 2a-Assertion 4 :- The AssessmentTest and a descendant AssessmentSectionRef must not have the same unique identifier.
            *RULE GENERAL 2a-Assertion 5 :- The AssessmentTest and a descendant AssessmentItemRef must not have the same unique identifier.
            *RULE GENERAL 2b-Assertion 2 :- The TestPart and an AssessmentSection must not have the same unique identifier.
            *RULE GENERAL 2b-Assertion 3 :- The TestPart and a direct child AssessmentSectionRef must not have the same unique identifier.
            *RULE GENERAL 2b-Assertion 4 :- The TestPart and a descendant AssessmentSectionRef must not have the same unique identifier.
            *RULE GENERAL 2b-Assertion 5 :- The TestPart and a descendant AssessmentItemRef must not have the same unique identifier.
            *RULE GENERAL 2b-Assertion 1 :- Two TestParts must not have the same unique identifier.
            *RULE GENERAL 2c-Assertion 2 :- The AssessmentSection and a descendant AssessmentSection must not have the same unique identifier.
            *RULE GENERAL 2c-Assertion 3 :- The AssessmentSection and a descendant AssessmentSectionRef must not have the same unique identifier.
            *RULE GENERAL 2c-Assertion 4 :- The AssessmentSection and a descendant AssessmentItemRef must not have the same unique identifier.
            *RULE GENERAL 2c-Assertion 1 :- Two AssessmentSection children of a TestPart must not have the same unique identifier.

            RULE SET GENERAL 3: Ensure that AssessmentItem Response
            Declarations are correct. The set of rules are:

            RULE SET INTERACTION 1: Enforce the correct use the TextEntryInteraction attributes. The set of rules are:
            *RULE INTERACTION 1a-Assertion 1 :- The StringIdentifier and ResponseIdentifier attribute values must not be the same.

            History: Version 1.0: The first set of schematron rules for the
            IMS Global QTIv2.1 specification.
        </xs:documentation>

        <xs:appinfo>
            <sch:ns uri="http://www.imsglobal.org/xsd/imsqti_v2p1" prefix="qti" />
            <sch:title>Schematron Validation Rules for QTI Specification v2.1.</sch:title>

            <!-- RULESET ******************************************************************* -->
            <sch:pattern abstract="false" name="RULE SET GENERAL 1">
                <sch:title>Ensure that certain expressions are NOT used for Response Processing.</sch:title>

                <sch:rule abstract="false" context="//qti:assessmentItem/qti:responseProcessing">
                    <sch:assert test="count(descendant::qti:numberPresented) = 0">
                        [RULE GENERAL 1a:Assertion 3] The expression numberPresented must NOT be used in Response Processing.
                        <sch:value-of select="concat('The Assessment Item identifier is:', ../@identifier)" />
                    </sch:assert>
                    <sch:assert test="count(descendant::qti:numberResponded) = 0">
                        [RULE GENERAL 1a:Assertion 4] The expression numberResponded must NOT be used in Response Processing.
                        <sch:value-of select="concat('The Assessment Item identifier is:', ../@identifier)" />
                    </sch:assert>
                    <sch:assert test="count(descendant::qti:numberSelected) = 0">
                        [RULE GENERAL 1a:Assertion 5] The expression numberSelected must NOT be used in Response Processing.
                        <sch:value-of select="concat('The Assessment Item identifier is:', ../@identifier)" />
                    </sch:assert>
                    <sch:assert test="count(descendant::qti:numberCorrect) = 0">
                        [RULE GENERAL 1a:Assertion 1] The expression numberCorrect must NOT be used in Response Processing.
                        <sch:value-of select="concat('The Assessment Item identifier is:', ../@identifier)" />
                    </sch:assert>
                    <sch:assert test="count(descendant::qti:numberIncorrect) = 0">
                        [RULE GENERAL 1a:Assertion 2] The expression numberIncorrect must NOT be used in Response Processing.
                        <sch:value-of select="concat('The Assessment Item identifier is:', ../@identifier)" />
                    </sch:assert>
                    <sch:assert test="count(descendant::qti:outcomeMinimum) = 0">
                        [RULE GENERAL 1a:Assertion 6] The expression outcomeMinimum must NOT be used in Response Processing.
                        <sch:value-of select="concat('The Assessment Item identifier is:', ../@identifier)" />
                    </sch:assert>
                    <sch:assert test="count(descendant::qti:outcomeMaximum) = 0">
                        [RULE GENERAL 1a:Assertion 7] The expression outcomeMaximum must NOT be used in Response Processing.
                        <sch:value-of select="concat('The Assessment Item identifier is:', ../@identifier)" />
                    </sch:assert>
                    <sch:assert test="count(descendant::qti:testVariables) = 0">
                        [RULE GENERAL 1a:Assertion 8] The expression testVariables must NOT be used in Response Processing.
                        <sch:value-of select="concat('The Assessment Item identifier is:', ../@identifier)" />
                    </sch:assert>
                </sch:rule>

            </sch:pattern>
            <!-- *************************************************************************** -->

            <!-- RULESET ******************************************************************* -->
            <sch:pattern abstract="false" name="RULE SET GENERAL 2">
                <sch:title>Ensure that the Item, Section, Test and TestPart identifiers are unique.</sch:title>

                <sch:rule abstract="false" context="//qti:assessmentTest">
                    <sch:assert test="not(@identifier=qti:testPart/@identifier)">
                        [RULE GENERAL 2a:Assertion 1] The AssessmentTest and a TestPart must not have the same unique identifier.
                        <sch:value-of select="concat('The AssessmentTest identifier is:', @identifier)" />
                    </sch:assert>
                    <sch:assert test="not(@identifier=qti:testPart/descendant::qti:assessmentSection/@identifier)">
                        [RULE GENERAL 2a:Assertion 2] The AssessmentTest and an AssessmentSection must not have the same unique identifier.
                        <sch:value-of select="concat('The AssessmentTest identifier is:', @identifier)" />
                    </sch:assert>
                    <sch:assert test="not(@identifier=qti:testPart/qti:assessmentSectionRef/@identifier)">
                        [RULE GENERAL 2a:Assertion 3] The AssessmentTest and a direct child AssessmentSectionRef must not have the same unique identifier.
                        <sch:value-of select="concat('The AssessmentTest identifier is:', @identifier)" />
                    </sch:assert>
                    <sch:assert test="not(@identifier=qti:testPart/descendant::qti:assessmentSection/qti:assessmentSectionRef/@identifier)">
                        [RULE GENERAL 2a:Assertion 4] The AssessmentTest and a descendant AssessmentSectionRef must not have the same unique identifier.
                        <sch:value-of select="concat('The AssessmentTest identifier is:', @identifier)" />
                    </sch:assert>
                    <sch:assert test="not(@identifier=qti:testPart/descendant::qti:assessmentSection/qti:assessmentItemRef/@identifier)">
                        [RULE GENERAL 2a:Assertion 5] The AssessmentTest and a descendant AssessmentItemRef must not have the same unique identifier.
                        <sch:value-of select="concat('The AssessmentTest identifier is:', @identifier)" />
                    </sch:assert>
                </sch:rule>

                <sch:rule abstract="false" context="//qti:assessmentTest/qti:testPart">
                    <sch:assert test="not(@identifier=descendant::qti:assessmentSection/@identifier)">
                        [RULE GENERAL 2b:Assertion 2] The TestPart and an AssessmentSection must not have the same unique identifier.
                        <sch:value-of select="concat('The TestPart identifier is:', @identifier)" />
                    </sch:assert>
                    <sch:assert test="not(@identifier=qti:assessmentSectionRef/@identifier)">
                        [RULE GENERAL 2b:Assertion 3] The TestPart and a direct child AssessmentSectionRef must not have the same unique identifier.
                        <sch:value-of select="concat('The TestPart identifier is:', @identifier)" />
                    </sch:assert>
                    <sch:assert test="not(@identifier=descendant::qti:assessmentSection/qti:assessmentSectionRef/@identifier)">
                        [RULE GENERAL 2b:Assertion 4] The TestPart and a descendant AssessmentSectionRef must not have the same unique identifier.
                        <sch:value-of select="concat('The TestPart identifier is:', @identifier)" />
                    </sch:assert>
                    <sch:assert test="not(@identifier=descendant::qti:assessmentSection/qti:assessmentItemRef/@identifier)">
                        [RULE GENERAL 2b:Assertion 5] The TestPart and a descendant AssessmentItemRef must not have the same unique identifier.
                        <sch:value-of select="concat('The TestPart identifier is:', @identifier)" />
                    </sch:assert>
                    <sch:assert test="not(@identifier=preceding-sibling::qti:testPart/@identifier)">
                        [RULE GENERAL 2b:Assertion 1] Two TestParts must not have the same unique identifier.
                        <sch:value-of select="concat('The TestPart identifier is:', @identifier)" />
                    </sch:assert>
                </sch:rule>

                <sch:rule abstract="false" context="//qti:assessmentTest/qti:testPart/qti:assessmentSection">
                    <sch:assert test="not(@identifier=descendant::qti:assessmentSection/@identifier)">
                        [RULE GENERAL 2c:Assertion 2] The AssessmentSection and a descendant AssessmentSection must not have the same unique identifier.
                        <sch:value-of select="concat('The AssessmentSection identifier is:', @identifier)" />
                    </sch:assert>
                    <sch:assert test="not(@identifier=descendant::qti:assessmentSectionRef/@identifier)">
                        [RULE GENERAL 2c:Assertion 3] The AssessmentSection and a descendant AssessmentSectionRef must not have the same unique identifier.
                        <sch:value-of select="concat('The TestPart identifier is:', @identifier)" />
                    </sch:assert>
                    <sch:assert test="not(@identifier=descendant::qti:assessmentItemRef/@identifier)">
                        [RULE GENERAL 2c:Assertion 4] The AssessmentSection and a descendant AssessmentItemRef must not have the same unique identifier.
                        <sch:value-of select="concat('The TestPart identifier is:', @identifier)" />
                    </sch:assert>
                    <sch:assert test="not(@identifier=preceding-sibling::qti:assessmentSection/@identifier)">
                        [RULE GENERAL 2c:Assertion 1] Two AssessmentSection children of a TestPart must not have the same unique identifier.
                        <sch:value-of select="concat('The AssessmentSection identifier is:', @identifier)" />
                    </sch:assert>
                </sch:rule>

            </sch:pattern>
            <!-- *************************************************************************** -->

            <!-- RULESET ******************************************************************* -->
            <sch:pattern abstract="false" name="RULE SET GENERAL 3">
                <sch:title>Ensure that AssessmentItem Response Declarations are correct.</sch:title>

            </sch:pattern>
            <!-- *************************************************************************** -->

            <!-- RULESET ******************************************************************* -->
            <sch:pattern abstract="false" name="RULE SET INTERACTION 1">
                <sch:title>Enforce the correct use the TextEntryInteraction attributes.</sch:title>

                <sch:rule abstract="false" context="//qti:textEntryInteraction[@stringIdentifier]">
                    <sch:assert test="not(@stringIdentifier=@responseIdentifier)">
                        [RULE INTERACTION 1a:Assertion 1] The StringIdentifier and ResponseIdentifier attribute values must not be the same.
                        <sch:value-of select="concat('The StringIdentifier value is:', @stringIdentifier)" />
                    </sch:assert>
                </sch:rule>

            </sch:pattern>
            <!-- *************************************************************************** -->

        </xs:appinfo>
    </xs:annotation>

    <xs:annotation>
        <xs:documentation>
            Schematron Strict Selection Validation Rules
            --------------------------------------------
            This is the set of Schematron rules that have been created to
            enforce the use of the "Unordered" stereotype.
            These rules ensure that the number of entries in an unordered complexType of an element obey the multiplicity constraints.
            This is required so that any-order/any-multiplicity complexTypes can be constructed and validated.
        </xs:documentation>
        <xs:appinfo>
            <sch:ns uri="http://www.imsglobal.org/xsd/apip/apipv1p0/imsapip_qtiv1p0" prefix="apip" />
            <sch:title>Schematron validation rules for the enforcement of the Unordered stereotype.</sch:title>

            <!-- RULESET ******************************************************************* -->
            <sch:pattern abstract="false" id="CompanionMaterialsInfo.Type">
                <sch:title>[RULESET] For the CompanionMaterialsInfo.Type complexType.</sch:title>

                <sch:rule abstract="false" context="apip:apipAccessibility/apip:companionMaterialsInfo">

                    <sch:assert test="count(apip:calculator) = 0 or count(apip:calculator) = 1">
                        [RULE for Local Attribute 1] Invalid number of "calculator" elements:
                        <sch:value-of select="count(apip:calculator)" />
                        .
                    </sch:assert>

                </sch:rule>

            </sch:pattern>
            <!-- *************************************************************************** -->

            <!-- RULESET ******************************************************************* -->
            <sch:pattern abstract="false" id="InclusionOrder.Type">
                <sch:title>[RULESET] For the InclusionOrder.Type complexType.</sch:title>

                <sch:rule abstract="false" context="apip:apipAccessibility/apip:inclusionOrder">

                    <sch:assert test="count(apip:brailleDefaultOrder) = 0 or count(apip:brailleDefaultOrder) = 1">
                        [RULE for Local Attribute 1] Invalid number of "brailleDefaultOrder" elements:
                        <sch:value-of select="count(apip:brailleDefaultOrder)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:textOnlyDefaultOrder) = 0 or count(apip:textOnlyDefaultOrder) = 1">
                        [RULE for Local Attribute 2] Invalid number of "textOnlyDefaultOrder" elements:
                        <sch:value-of select="count(apip:textOnlyDefaultOrder)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:textOnlyOnDemandOrder) = 0 or count(apip:textOnlyOnDemandOrder) = 1">
                        [RULE for Local Attribute 3] Invalid number of "textOnlyOnDemandOrder" elements:
                        <sch:value-of select="count(apip:textOnlyOnDemandOrder)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:textGraphicsDefaultOrder) = 0 or count(apip:textGraphicsDefaultOrder) = 1">
                        [RULE for Local Attribute 4] Invalid number of "textGraphicsDefaultOrder" elements:
                        <sch:value-of select="count(apip:textGraphicsDefaultOrder)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:textGraphicsOnDemandOrder) = 0 or count(apip:textGraphicsOnDemandOrder) = 1">
                        [RULE for Local Attribute 5] Invalid number of "textGraphicsOnDemandOrder" elements:
                        <sch:value-of select="count(apip:textGraphicsOnDemandOrder)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:graphicsOnlyOnDemandOrder) = 0 or count(apip:graphicsOnlyOnDemandOrder) = 1">
                        [RULE for Local Attribute 6] Invalid number of "graphicsOnlyOnDemandOrder" elements:
                        <sch:value-of select="count(apip:graphicsOnlyOnDemandOrder)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:nonVisualDefaultOrder) = 0 or count(apip:nonVisualDefaultOrder) = 1">
                        [RULE for Local Attribute 7] Invalid number of "nonVisualDefaultOrder" elements:
                        <sch:value-of select="count(apip:nonVisualDefaultOrder)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:aslDefaultOrder) = 0 or count(apip:aslDefaultOrder) = 1">
                        [RULE for Local Attribute 8] Invalid number of "aslDefaultOrder" elements:
                        <sch:value-of select="count(apip:aslDefaultOrder)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:aslOnDemandOrder) = 0 or count(apip:aslOnDemandOrder) = 1">
                        [RULE for Local Attribute 9] Invalid number of "aslOnDemandOrder" elements:
                        <sch:value-of select="count(apip:aslOnDemandOrder)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:signedEnglishDefaultOrder) = 0 or count(apip:signedEnglishDefaultOrder) = 1">
                        [RULE for Local Attribute 10] Invalid number of "signedEnglishDefaultOrder" elements:
                        <sch:value-of select="count(apip:signedEnglishDefaultOrder)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:signedEnglishOnDemandOrder) = 0 or count(apip:signedEnglishOnDemandOrder) = 1">
                        [RULE for Local Attribute 11] Invalid number of "signedEnglishOnDemandOrder" elements:
                        <sch:value-of select="count(apip:signedEnglishOnDemandOrder)" />
                        .
                    </sch:assert>

                </sch:rule>

            </sch:pattern>
            <!-- *************************************************************************** -->

            <!-- RULESET ******************************************************************* -->
            <sch:pattern abstract="false" id="RelatedElementInfo.Type">
                <sch:title>[RULESET] For the RelatedElementInfo.Type complexType.</sch:title>

                <sch:rule abstract="false" context="apip:apipAccessibility/apip:accessibilityInfo/apip:accessElement/apip:relatedElementInfo">

                    <sch:assert test="count(apip:spoken) = 0 or count(apip:spoken) = 1">
                        [RULE for Local Attribute 1] Invalid number of "spoken" elements:
                        <sch:value-of select="count(apip:spoken)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:brailleText) = 0 or count(apip:brailleText) = 1">
                        [RULE for Local Attribute 2] Invalid number of "brailleText" elements:
                        <sch:value-of select="count(apip:brailleText)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:tactileFile) = 0 or count(apip:tactileFile) = 1">
                        [RULE for Local Attribute 3] Invalid number of "tactileFile" elements:
                        <sch:value-of select="count(apip:tactileFile)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:signing) = 0 or count(apip:signing) = 1">
                        [RULE for Local Attribute 4] Invalid number of "signing" elements:
                        <sch:value-of select="count(apip:signing)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:keyWordTranslation) = 0 or count(apip:keyWordTranslation) = 1">
                        [RULE for Local Attribute 5] Invalid number of "keyWordTranslation" elements:
                        <sch:value-of select="count(apip:keyWordTranslation)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:revealAlternativeRepresentation) = 0 or count(apip:revealAlternativeRepresentation) = 1">
                        [RULE for Local Attribute 6] Invalid number of "revealAlternativeRepresentation" elements:
                        <sch:value-of select="count(apip:revealAlternativeRepresentation)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:guidance) = 0 or count(apip:guidance) = 1">
                        [RULE for Local Attribute 7] Invalid number of "guidance" elements:
                        <sch:value-of select="count(apip:guidance)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:structuredMask) = 0 or count(apip:structuredMask) = 1">
                        [RULE for Local Attribute 8] Invalid number of "structuredMask" elements:
                        <sch:value-of select="count(apip:structuredMask)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:scaffold) = 0 or count(apip:scaffold) = 1">
                        [RULE for Local Attribute 9] Invalid number of "scaffold" elements:
                        <sch:value-of select="count(apip:scaffold)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:chunk) = 0 or count(apip:chunk) = 1">
                        [RULE for Local Attribute 10] Invalid number of "chunk" elements:
                        <sch:value-of select="count(apip:chunk)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:answerReduction) = 0 or count(apip:answerReduction) = 1">
                        [RULE for Local Attribute 11] Invalid number of "answerReduction" elements:
                        <sch:value-of select="count(apip:answerReduction)" />
                        .
                    </sch:assert>

                    <sch:assert test="count(apip:keyWordEmphasis) = 0 or count(apip:keyWordEmphasis) = 1">
                        [RULE for Local Attribute 12] Invalid number of "keyWordEmphasis" elements:
                        <sch:value-of select="count(apip:keyWordEmphasis)" />
                        .
                    </sch:assert>

                </sch:rule>

            </sch:pattern>
            <!-- *************************************************************************** -->

        </xs:appinfo>
    </xs:annotation>



</xs:schema>