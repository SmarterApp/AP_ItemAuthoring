<link rel="stylesheet" href="/common/js/windowfiles/dhtmlwindow.css" type="text/css" />
<link rel="stylesheet" href="/common/js/modalfiles/modal.css" type="text/css" />
<script type="text/javascript" src="/common/js/windowfiles/dhtmlwindow.js"></script>
<script type="text/javascript" src="/common/js/modalfiles/modal.js"></script>
<script type="text/javascript" src="/common/js/multifile_compressed.js"></script>
<script src="/common/js/ajax.js"></script>
<script type="text/javascript" src="/common/js/encoder.js"></script>

<link rel="stylesheet" href="../style/tablesorter/style1.css" type="text/css" />
<script type="text/javascript" src="/common/js/jquery-1.4.2.min.js"></script>
<script type="text/javascript" src="/common/js/jquery.tablesorter.min.js"></script>

<script>
<!--
var URL = 'items_manager.pl';
var progress_gif = '<font size="5" color="red">Loading Item(s) <img src="/common/images/spinner.gif" /></font>';
var progress_bar = '<img src="/common/images/spinner.gif" />';
var statuses = { 'progress_bar_area' : '' };
var tbl = { 'ib_id' : <TMPL_VAR NAME="ib_id" DEFAULT="0">, 'ip_id' : 0,
            'subaction' : 'search_metadata', 't_ib_id' : 0, 'sh_id' : 0,
            'hd_type' : [], 'hd_id' : 0, 'current_hd_type' : 0, 'progress_area':'',
	    browser:navigator.appName
          };

function doAction( f, action ) {
        f.action.value = action;
        f.submit();
}
function doActionLink( f, action ) {
         f.action.value = action;
         f.submit();
         return true;
}
function myOpen(name,url,w,h) {
         var myWin = window.open(url,name,'width='+w+',height='+h+',left=60,top=60,resizable=yes,scrollbars=yes,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no');
         return true;
}


function checkAll(list) {
        if( statuses[list.name] && statuses[list.name]['all_checked'] ) {
            for(i=0;i<list.length;i++) {
                list[i].checked = false;
            }
            statuses[list.name] = { 'all_checked' : false };
            none_checked = true;
        }
        else {
            for(i=0;i<list.length;i++) {
                list[i].checked = true;
            }
            statuses[list.name] = { 'all_checked' : true };
            none_checked = false;
        }
}

function doTool(f, btn, tool_list) {
        document.getElementById(btn).click();
        tool_list.selectedIndex = 0;
}

function loadStandards(f, ib_id) {
	if( ib_id == 0 ) return false;

                var ib = item_bank[ib_id];
                var h  = hierarchy[ib.sh_id];
                tbl.sh_id = ib.sh_id;

                var standards_table = document.getElementById('standards_table');
                while(standards_table.rows.length > 0) {
                    standards_table.deleteRow(0);
                }

                if( ! h || h.ql.length == 0 ) return false;

                var std = h.ql[1];

                var new_tr = standards_table.insertRow(0);
                new_tr.setAttribute("id",'row_type_' + std.ql_type);
                var new_td = new_tr.insertCell(0);
                new_td.innerHTML = std.ql_label + ':';
                new_td = new_tr.insertCell(-1);
                var new_select = '<select name="type_' + std.ql_type + 
                                 '" id="type_' + std.ql_type + 
                                 '" onChange="loadNext(this.form, this.name, this.value)">' +
                                 '<option value="0">-----</option>';
                    new_select += '<option value="' + h.hd_id +
                                  '">' + h.sh_external_id + '</option>';
                new_select += '</select>&nbsp;&nbsp;<span id="type_' + std.ql_type + '_spinner"></span>';
                new_td.innerHTML = new_select;
}

        function loadNext(f, type, hd_id) {
                if(hd_id == 0) return loadStandards(f, tbl.ib_id) ;

                var standards_table = document.getElementById('standards_table');
                var rows = standards_table.rows;
		//Set row count here as 'rows.length' is recalculated when 'deleteRow()'
		var row_cnt = rows.length; 

		//When '--' selected, remove lower nodes
                if(hd_id == 'X') {
		    var type2 = type.split('_');
		    if(type2[1] == 6) return; //This is the last level, no need to proceed.

                    for(var i=type2[1];i<row_cnt;i++) {
                    	standards_table.deleteRow(-1);
                    }
                    
		    //Need to set hd_id to the value of the last node selected
		    var menu  = document.getElementById('type_'+type2[1]);
		    tbl.hd_id = menu.options[menu.selectedIndex].value;
		    return;
		}

                tbl.hd_id = hd_id;
                statuses.progress_bar_area = type + '_spinner';
                document.getElementById(statuses.progress_bar_area).innerHTML = progress_bar;

                var cr = 0;
                var row_type = 'row_' + type;
                for(var i=0;i<row_cnt;i++) {
                    if( rows[i].getAttribute('id') == row_type ) {
                         cr = i + 1;
                         break;
                    }
                }
                
                for(var i=cr;i<row_cnt;i++) {
                    standards_table.deleteRow(-1);
                }

                tbl.current_hd_type = type.replace('type_', '');
                tbl.hd_type.push(tbl.current_hd_type);

                var post_params = 'sess_id='        + f.sess_id.value +
                                  '&instance_name=' + f.instance_name.value +
                                  '&sh_id='         + tbl.sh_id +
                                  '&hd_id='         + hd_id +
                                  '&hd_type='       + tbl.current_hd_type;

                if( tbl.blueprint && tbl.current_hd_type >= 3) {
                    post_params += '&action=getHierarchyTree';
                    ajaxpack.postAjaxRequest( URL, post_params, displayLowerLevels, "txt" );
                }
                else {
                    post_params += '&action=getHierarchyDefinition';
                    ajaxpack.postAjaxRequest( URL, post_params, displayNext, "txt" );
                }
        }
        function displayNext() {
                ajax = ajaxpack.ajaxobj;
                if ( ajax.readyState == 4 ) {
                    if( ajax.status==200 ) {
                        var results = ajax.responseText.split('<json_data>');
                        if( results[0] == 0 ) {
                            document.getElementById(statuses.progress_bar_area).innerHTML = 'Last Level!';
                        }
                        else {
                            var hd = eval('(' + results[1] + ')');
                            var standards_table = document.getElementById('standards_table');
                            var new_tr = standards_table.insertRow(-1);
                            new_tr.setAttribute("id",'row_type_' + hd[0].hd_type);
                            var new_td = new_tr.insertCell(0);
                            new_td.innerHTML = results[0] + ':';
                            new_td = new_tr.insertCell(1);
                            var new_select = '<select name="type_' + hd[0].hd_type + 
                                 '" id="type_' + hd[0].hd_type + 
                                 '" onChange="loadNext(this.form, this.name, this.value)">' +
                                 '<option value="X">-----</option>';
                            for(var i=0; i < hd.length; i++) {
                                var std = hd[i];
                                new_select += '<option value="' + std.hd_id + '">' + Encoder.htmlDecode(std.hd_value) + '</option>';
                            }
                            new_select += '</select>&nbsp;&nbsp;<span id="type_' + std.hd_type + '_spinner"></span>';
                            new_td.innerHTML = new_select;
                            document.getElementById(statuses.progress_bar_area).innerHTML = '';
                        }
                    }
                    else {
                        document.getElementById(statuses.progress_bar_area).innerHTML = 'Error : ' + ajax.status + '!';
                    }
                }
        }

function sortByName(x,y) {
      return ((x.name == y.name) ? 0 : ((x.name > y.name) ? 1 : -1 ));
}

function loadPrograms() {
        var tbl = [];
        for( ib_id in banks ) {
            tbl.push( banks[ib_id] );
        }
        tbl.sort(sortByName);
        for(var n=0;n<tbl.length;n++){
            document.itemUpload.ib_id.options.add( new Option(tbl[n].name, tbl[n].ib_id) );
        }
}
function setStemChoice(f, item_format) {
        if( item_format == '' ) return;
        
        f.stem_cnt.selectedIndex = 0;
        if( item_format <= 2 ) {
            f.choice_cnt.selectedIndex = 4;
        }
        else {
            f.choice_cnt.selectedIndex = 0;
        }   
} 
function compareGradeSpan(f, gs) {
        var gs_start;
        var gs_end;
        if( gs.name == 'grade_span_start' ) {
            gs_start = gs.value;
            gs_end   = f.grade_span_end.options[f.grade_span_end.selectedIndex].value;
        }
        else {
            gs_start = f.grade_span_start.options[f.grade_span_start.selectedIndex].value;
            gs_end   = gs.value;
        }

        if( gs_start == '' || gs_end == '' || gs_start == '-' || gs_end == '-' ) return;

        if( f.grade_span_start.selectedIndex >= f.grade_span_end.selectedIndex ) {
            alert( 'Grade Span End must be greater than Grade Span Start!' );
            gs.selectedIndex = 0;
            gs.focus();
        }
}
</script>
